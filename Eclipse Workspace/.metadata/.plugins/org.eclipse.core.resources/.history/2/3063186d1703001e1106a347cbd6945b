package controller;

import java.net.URL;
import java.util.ResourceBundle;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;

import javafx.scene.control.TextArea;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.ZoneId;
import java.util.ResourceBundle;

import application.ConnexionMysql;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.ImageView;
import models.Agenda;
import models.Patients;
import javafx.stage.*;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.scene.image.Image;
import java.io.ByteArrayInputStream;
import java.sql.Time;
import javafx.util.StringConverter;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.ZoneId;



public class GererAgendaController implements Initializable {
	
	Connection cnx;
    public PreparedStatement st;
    public ResultSet result ;

	    @FXML
	    private DatePicker DatePicker;

	    @FXML
	    private TableView<Agenda> table_agenda;
	    
	    @FXML
	    private TableColumn<Agenda, Integer> cln_id;

	    @FXML
	    private TableColumn<Agenda, String> cln_nom;

	    @FXML
	    private TableColumn<Agenda, String> cln_prenom;

	    @FXML
	    private TableColumn<Agenda, String> cln_tel;

	    @FXML
	    private TableColumn<Agenda, String> cln_heure;

	    @FXML
	    private TableColumn<Agenda, Date> cln_date;

	    @FXML
	    private DatePicker txt_search;

	    @FXML
	    private TextField txt_nom;

	    @FXML
	    private TextField txt_prenom;

	    @FXML
	    private TextField txt_tel;

	    @FXML
	    private TextField txt_heure;
	    
	    public ObservableList<Agenda> data = FXCollections.observableArrayList();
	    

	    @FXML
	    void ajouetrA(MouseEvent event) {
	    	String nom =txt_nom.getText();
	    	String prenom =txt_prenom.getText();
	    	String tel =txt_tel.getText();
	    	String heure =txt_heure.getText();
	    	
	    	String sql="insert into agenda(nom,prenom,numTel,dateR,heure) values(?,?,?,?,?)";
	    	if(!nom.equals("")&&!prenom.equals("")&&!tel.equals("")&&!heure.equals("")&&!DatePicker.getValue().equals(null)) {
	    		try {
					st=cnx.prepareStatement(sql);
					st.setString(1, nom);
					java.util.Date date =java.util.Date.from(DatePicker.getValue().atStartOfDay(ZoneId.systemDefault()).toInstant());
					Date sqlDate = new Date(date.getTime());
					st.setDate(4, sqlDate);
					st.setString(2, prenom);
					st.setString(3, tel);
					st.setString(5, heure);
					st.execute();
					txt_nom.setText("");
				    txt_prenom.setText("");
				    txt_tel.setText("");
				    txt_heure.setText("");
				    DatePicker.setValue(null);
				    Alert alert = new Alert(AlertType.CONFIRMATION,"rendez_vous ajouté avec succès!",javafx.scene.control.ButtonType.OK);
				    alert.showAndWait();
				    showAgenda();
				} catch (SQLException e) {
					e.printStackTrace();
				} 
	    	} else {
	    		Alert alert = new Alert(AlertType.WARNING,"veuillez remplir tous les champs!",javafx.scene.control.ButtonType.OK);
			    alert.showAndWait();
	    	}

	    }

	    @FXML
	    void modifierA(MouseEvent event) {

	    }

	    @FXML
	    void searchA(MouseEvent event) {
	    	LocalDate searchName = txt_search.getValue();
	    	if (searchName !=null) {
	        ObservableList<Agenda> filteredList = data.filtered(RDV -> {
	            LocalDate rdvDate = RDV.getDate().toLocalDate();
	            return rdvDate.isEqual(searchName);
	        });

	        if (!filteredList.isEmpty()) {
	            table_agenda.setItems(filteredList);
	            table_agenda.getSelectionModel().selectFirst(); // Select the first matching row
	        } else {
	            table_agenda.getItems().clear(); // Clear the table if no matching rows
	            Alert alert = new Alert(AlertType.ERROR, "Aucun Date trouvé avec le nom = " + searchName, ButtonType.OK);
	            alert.showAndWait();
	        }
	    }
	    	else{
	    		Alert alert = new Alert(AlertType.ERROR, "Aucun Date trouvé avec le nom = " + searchName, ButtonType.OK);
	            alert.showAndWait();
	    	}}

	    
	    @FXML
	    void supprimerA(MouseEvent event) {

	    }
	    
	    public void showAgenda() {
	    	table_agenda.getItems().clear();
	    	String sql ="select * from agenda";
	        try {
				st=cnx.prepareStatement(sql);
				result=st.executeQuery();
				while(result.next()) {
					data.add(new Agenda(result.getInt("idA"),result.getString("nom"),result.getString("prenom"),result.getString("numTel"),result.getDate("dateR"),result.getString("heure")));
				}
			} catch (SQLException e) {

				e.printStackTrace();
			}
	        
	        cln_id.setCellValueFactory(new PropertyValueFactory<Agenda, Integer>("id"));
	        cln_nom.setCellValueFactory(new PropertyValueFactory<Agenda, String>("nom"));
	        cln_prenom.setCellValueFactory(new PropertyValueFactory<Agenda, String>("prenom"));
	        cln_tel.setCellValueFactory(new PropertyValueFactory<Agenda, String>("tel"));
	        cln_date.setCellValueFactory(new PropertyValueFactory<Agenda, Date>("date"));
	        cln_heure.setCellValueFactory(new PropertyValueFactory<Agenda, String>("heure"));
	        table_agenda.setItems(data);
	        
	    }
	    



	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		
		cnx = ConnexionMysql.connexionDB();
		showAgenda();
		
		table_agenda.setOnMouseClicked(event -> {
	        Agenda selectedRDV = table_agenda.getSelectionModel().getSelectedItem();
	        String sql="select idA,nom,prenom,numTel,dateR,heure from agenda where idA ='"+selectedRDV.getId()+"'" ;
	        
	      
	    	try {
				st=cnx.prepareStatement(sql);
				result=st.executeQuery();
				if(result.next()) {
					txt_nom.setText(result.getString("nom"));
					txt_prenom.setText(result.getString("prenom"));
					txt_tel.setText(result.getString("numTel"));
					Date date= result.getDate("dateR");
					DatePicker.setValue(date.toLocalDate());
					Time timeValue = result.getTime("heure");
					String formattedTime = timeValue.toString();
					txt_heure.setText(formattedTime);

					
				}
			
	    	} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    });

		
	}

}
